(crate
    (items
        (fn-def
            (id
                (main))
            (block
                (let
                    (pat-id
                        (id
                            (program)))
                    (type-ref
                        (type-arr
                            (type-u8)))
                    (lit-str))
                (let
                    (pat-mut-id
                        (id
                            (mp)))
                    (type-arr
                        (type-u8)
                        (lit-dec))
                    (arr
                        (exprs
                            (lit-dec)
                            (lit-dec)
                            (lit-dec))))
                (assign
                    (arr-index
                        (id
                            (mp))
                        (lit-dec))
                    (lit-char))
                (let
                    (pat-mut-id
                        (id
                            (accumulator)))
                    (lit-dec))
                (let
                    (pat-mut-id
                        (id
                            (i)))
                    (lit-dec))
                (while
                    (lt
                        (id
                            (i))
                        (id
                            (program)))
                    (block
                        (match
                            (arr-index
                                (id
                                    (program))
                                (id
                                    (i)))
                            (match-arms
                                (match-arm
                                    (pats
                                        (pat-lit
                                            (lit-char)))
                                    (block
                                        (assign-add
                                            (id
                                                (accumulator))
                                            (lit-dec))))
                                (match-arm
                                    (pats
                                        (pat-lit
                                            (lit-char)))
                                    (block
                                        (assign-sub
                                            (id
                                                (accumulator))
                                            (lit-dec))))
                                (match-arm
                                    (pats
                                        (pat-lit
                                            (lit-char)))
                                    (block
                                        (assign-mul
                                            (id
                                                (accumulator))
                                            (lit-dec))))
                                (match-arm
                                    (pats
                                        (pat-lit
                                            (lit-char)))
                                    (block
                                        (assign-div
                                            (id
                                                (accumulator))
                                            (lit-dec))))
                                (match-arm
                                    (pats
                                        (pat-wild))
                                    (block))))
                        (assign-add
                            (id
                                (i))
                            (lit-dec))))
                (fn-call
                    (id
                        (putstr))
                    (exprs
                        (lit-str)))
                (fn-call
                    (id
                        (putint))
                    (exprs
                        (id
                            (accumulator))))))))