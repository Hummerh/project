fn
ID(main)
(
)
{
let
ID(program)
=
LITSTR(+ + * - /)
;
let
mut
ID(accumulator)
=
LITDEC(0)
;
for
ID(token)
in
ID(program)
.
ID(chars)
(
)
{
match
ID(token)
{
LITCHAR(+)
=>
ID(accumulator)
+=
LITDEC(1)
,
LITCHAR(-)
=>
ID(accumulator)
-=
LITDEC(1)
,
LITCHAR(*)
=>
ID(accumulator)
*=
LITDEC(2)
,
LITCHAR(/)
=>
ID(accumulator)
/=
LITDEC(2)
,
ID(_)
=>
{
}
}
}
ID(println)
!
(
LITSTR(The program "{}" calculates the value {})
,
ID(program)
,
ID(accumulator)
)
;
}
