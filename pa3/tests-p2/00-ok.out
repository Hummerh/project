
(crate:ok!
    (items
        (struct-def:ok!
            (id
                (Point))
            (field-defs
                (field-def
                    (id
                        (x))
                    (type-i32))
                (field-def
                    (id
                        (y))
                    (type-i32))))
        (fn-def:ok!
            (id
                (foo))
            (fn-params
                (fn-param
                    (pat-id
                        (id
                            (x)))
                    (type-i32))
                (fn-param
                    (pat-id
                        (id
                            (y)))
                    (type-bool)))
            (type-unit)
            (block:()
                (unit:())))
        (fn-def:ok!
            (id
                (main))
            (type-unit)
            (block:()
                (let:()
                    (pat-id
                        (id
                            (x)))
                    (type-bool)
                    (or:bool
                        (true:bool)
                        (false:bool)))
                (let:()
                    (pat-id
                        (id
                            (y)))
                    (lit-dec:i32))
                (let:()
                    (pat-id
                        (id
                            (z)))
                    (id
                        (Point))
                    (struct:Point
                        (id
                            (Point))
                        (field-inits
                            (field-init
                                (id
                                    (x))
                                (lit-dec:i32))
                            (field-init
                                (id
                                    (y))
                                (lit-dec:i32)))))
                (if:()
                    (or:bool
                        (id:bool
                            (x))
                        (lt:bool
                            (id:i32
                                (y))
                            (lit-dec:i32)))
                    (block:()
                        (let:()
                            (pat-id
                                (id
                                    (w)))
                            (type-ref
                                (type-i32))
                            (addr-of:&i32
                                (id:i32
                                    (y))))
                        (loop:()
                            (block:()
                                (fn-call:()
                                    (id
                                        (foo))
                                    (exprs
                                        (add:i32
                                            (field-lookup:i32
                                                (id:Point
                                                    (z))
                                                (id
                                                    (x)))
                                            (field-lookup:i32
                                                (id:Point
                                                    (z))
                                                (id
                                                    (y))))
                                        (not:bool
                                            (id:bool
                                                (x))))))))
                    (block:()
                        (let:()
                            (pat-id
                                (id
                                    (z)))
                            (arr:[i32;3]
                                (exprs
                                    (lit-dec:i32)
                                    (lit-dec:i32)
                                    (lit-dec:i32))))
                        (let:()
                            (pat-id
                                (id
                                    (w)))
                            (type-box
                                (type-arr
                                    (type-i32)
                                    (lit-dec)))
                            (box-new:Box<[i32;3]>
                                (exprs
                                    (id:[i32;3]
                                        (z)))))
                        (while:()
                            (lt:bool
                                (arr-index:i32
                                    (id:[i32;3]
                                        (z))
                                    (lit-dec:i32))
                                (arr-index:i32
                                    (id:[i32;3]
                                        (z))
                                    (lit-dec:i32)))
                            (block:()
                                (fn-call:()
                                    (id
                                        (foo))
                                    (exprs
                                        (arr-index:i32
                                            (deref:[i32;3]
                                                (id:Box<[i32;3]>
                                                    (w)))
                                            (lit-dec:i32))
                                        (neq:bool
                                            (id:i32
                                                (y))
                                            (lit-dec:i32))))))))))))
